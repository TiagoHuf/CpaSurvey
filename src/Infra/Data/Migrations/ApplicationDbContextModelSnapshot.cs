// <auto-generated />
using System;
using Biopark.CpaSurvey.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Biopark.CpaSurvey.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Biopark.CpaSurvey.Domain.Entities.Cursos.Curso", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Curso", (string)null);
                });

            modelBuilder.Entity("Biopark.CpaSurvey.Domain.Entities.Disciplinas.Disciplina", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Disciplina", (string)null);
                });

            modelBuilder.Entity("Biopark.CpaSurvey.Domain.Entities.Eixos.Eixo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Eixo", (string)null);
                });

            modelBuilder.Entity("Biopark.CpaSurvey.Domain.Entities.Perguntas.Pergunta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Descricao");

                    b.Property<long>("EixoId")
                        .HasColumnType("bigint");

                    b.Property<long>("TipoResposta")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EixoId");

                    b.ToTable("Pergunta", (string)null);
                });

            modelBuilder.Entity("Biopark.CpaSurvey.Domain.Entities.Respostas.Resposta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AlunoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Descricao")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Descricao");

                    b.Property<long>("PerguntaId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Valor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("PerguntaId");

                    b.ToTable("Resposta", (string)null);
                });

            modelBuilder.Entity("Biopark.CpaSurvey.Domain.Entities.TiposArea.TipoArea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Tipo", (string)null);
                });

            modelBuilder.Entity("Biopark.CpaSurvey.Domain.Entities.Turmas.Turma", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CursoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.ToTable("Turma", (string)null);
                });

            modelBuilder.Entity("Biopark.CpaSurvey.Domain.Entities.Usuarios.Aluno", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAtivo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ra")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Aluno", (string)null);
                });

            modelBuilder.Entity("Biopark.CpaSurvey.Domain.Entities.Perguntas.Pergunta", b =>
                {
                    b.HasOne("Biopark.CpaSurvey.Domain.Entities.Eixos.Eixo", "Eixo")
                        .WithMany("Perguntas")
                        .HasForeignKey("EixoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Eixo_Pergunta_EixoId");

                    b.Navigation("Eixo");
                });

            modelBuilder.Entity("Biopark.CpaSurvey.Domain.Entities.Respostas.Resposta", b =>
                {
                    b.HasOne("Biopark.CpaSurvey.Domain.Entities.Usuarios.Aluno", "Aluno")
                        .WithMany("Respostas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Aluno_Resposta_AlunoId");

                    b.HasOne("Biopark.CpaSurvey.Domain.Entities.Perguntas.Pergunta", "Pergunta")
                        .WithMany("Respostas")
                        .HasForeignKey("PerguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Pergunta_Resposta_PerguntaId");

                    b.Navigation("Aluno");

                    b.Navigation("Pergunta");
                });

            modelBuilder.Entity("Biopark.CpaSurvey.Domain.Entities.Turmas.Turma", b =>
                {
                    b.HasOne("Biopark.CpaSurvey.Domain.Entities.Cursos.Curso", "Curso")
                        .WithMany("Turmas")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Turma_Curso_CursoId");

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("Biopark.CpaSurvey.Domain.Entities.Cursos.Curso", b =>
                {
                    b.Navigation("Turmas");
                });

            modelBuilder.Entity("Biopark.CpaSurvey.Domain.Entities.Eixos.Eixo", b =>
                {
                    b.Navigation("Perguntas");
                });

            modelBuilder.Entity("Biopark.CpaSurvey.Domain.Entities.Perguntas.Pergunta", b =>
                {
                    b.Navigation("Respostas");
                });

            modelBuilder.Entity("Biopark.CpaSurvey.Domain.Entities.Usuarios.Aluno", b =>
                {
                    b.Navigation("Respostas");
                });
#pragma warning restore 612, 618
        }
    }
}
